__*Important note if your project doesn't use ARC*: you must add the @-fobjc-arc@ compiler flag to @SVProgressHUD.m@ in Target Settings > Build Phases > Compile Sources.__

SVProgressHUD is an easy-to-use, clean and lightweight progress HUD for iOS. It's a simplified and prettified alternative to the popular "MBProgressHUD":https://github.com/jdg/MBProgressHUD. The success and error icons are from "Glyphish":http://glyphish.com/.


!http://f.cl.ly/items/231Y2A0t0t1J0B0r3N0p/svprogresshud3.png!

SVProgressHUD features:

* very simple singleton convenience methods (@[SVProgressHUD show]@, @[SVProgressHUD dismiss]@, etc.)
* display of status strings and/or images to quickly communicate the state of the ongoing task
* automatic positioning based on device type, orientation and keyboard visibility
* optionally disable user interactions for ongoing tasks using a @maskType@ parameter

h2. Installation

* Drag the @SVProgressHUD/SVProgressHUD@ folder into your project. 
* Add the *QuartzCore* framework to your project. 

__If you plan on using SVProgressHUD in a lot of places inside your app, I recommend importing it directly inside your prefix file.__

h2. Usage

(see sample Xcode project in @/Demo@)

SVProgressHUD is created as a singleton (i.e. it doesn't need to be explicitly allocated and instantiated; you directly call @[SVProgressHUD method]@) and can be shown using one of the following convenience/class methods:

<pre>
+ (void)show;
+ (void)showWithMaskType:(SVProgressHUDMaskType)maskType;
+ (void)showWithStatus:(NSString*)string;
+ (void)showWithStatus:(NSString*)string maskType:(SVProgressHUDMaskType)maskType;
</pre>

It can be dismissed using:

<pre>
+ (void)dismiss;
</pre>

Optionally, you can have the HUD display a status and/or an image glyph before automatically getting dismissed 1s later (not customizable anymore to discourage lenghty status strings â€” for which UIAlertViews would be more appropriate).

<pre>
+ (void)showSuccessWithStatus:(NSString*)string;
+ (void)showErrorWithStatus:(NSString *)string;
+ (void)showImage:(UIImage*)image status:(NSString*)string; // use 28x28 white pngs
</pre>

h3. SVProgressHUDMaskType

You can optionally disable user interactions while a task is being completed by using the show methods that support the @maskType@ property:

<pre>
enum {
    SVProgressHUDMaskTypeNone = 1, // allow user interactions, don't dim background UI (default)
    SVProgressHUDMaskTypeClear, // disable user interactions, don't dim background UI
    SVProgressHUDMaskTypeBlack, // disable user interactions, dim background UI with 50% translucent black
    SVProgressHUDMaskTypeGradient // disable user interactions, dim background UI with translucent radial gradient (a-la-alertView)
};
</pre>

h2. Credits

SVProgressHUD is brought to you by "Sam Vermette":http://samvermette.com and "contributors to the project":https://github.com/samvermette/SVProgressHUD/contributors. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by "creating new issues":https://github.com/samvermette/SVProgressHUD/issues/new. If you're using SVProgressHUD in your project, attribution would be nice.